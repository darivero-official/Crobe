<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defining varibles
v_msg_fnt = global.v_msg_fnt; //Set font
v_msg_type = global.v_msg_auth_type; //Set message type (0 = login, 1 = register)
v_msg_alpha = 0; //Set message alpha
v_msg_width = 0; //Set message width
v_msg_height = 0; //Set message height
v_msg_max_l = display_get_gui_width()*(5/8); //Set message max length (in pixels)
v_msg_padding = 20*global.scaling; //Set message padding
v_msg_fnt_size = font_get_size(v_msg_fnt)+(font_get_size(v_msg_fnt)/2); //Get font size from v_msg_fnt
v_msg_btn_h = 36*global.scaling; //Set message buttons height
v_msg_input_w = v_msg_width//-v_msg_padding //Set message input width
v_msg_input_h = v_msg_fnt_size+(v_msg_padding/2); //Set message input height
v_msg_input_sel = 0; //Set input selected to 0
//Additional variables
v_enabled = true; //Set message is enabled
v_btn_1_state = "released"; //Set button 1 state to released
v_m_p = 1*global.scaling; //Border
//Controlling input
if v_msg_type = 1 { //Check if message type is 1 (register)
    v_msg_input_1txt = "Username"; //Set input 1 text
    v_msg_input_2txt = "Email address"; //Set input 2 text
    v_msg_input_3txt = "Password"; //Set input 3 text
    v_msg_input_4txt = "Repeat password"; //Set input 4 text
    v_msg_btn_1txt = "Register"; //Set button 1 text
}
else {
    v_msg_input_1txt = "Username"; //Set input 1 text
    v_msg_input_2txt = "Password"; //Set input 2 text
    v_msg_btn_1txt = "Login"; //Set button 1 text
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controlling buttons &amp; input
if device_mouse_x_to_gui(0) &gt;= x-v_msg_width-v_m_p &amp;&amp; device_mouse_x_to_gui(0) &lt;= x+v_msg_width+v_m_p { //Check if the mouse is located in a particular area
    if device_mouse_y_to_gui(0) &gt; y-v_msg_height-v_m_p &amp;&amp; device_mouse_y_to_gui(0) &lt; y-v_msg_height+v_msg_input_h+v_m_p { //Check if the mouse is located in a particular area
        if device_mouse_check_button(0,mb_left) { //Check if left click pressed on device 0
            v_msg_input_sel = 1; //Set input selected to 1
        }
    }
    if device_mouse_y_to_gui(0) &gt; y-v_msg_height+(v_msg_input_h+(v_msg_padding/2))-v_m_p &amp;&amp; device_mouse_y_to_gui(0) &lt; y-v_msg_height+(v_msg_input_h+(v_msg_padding/2))+v_msg_input_h+v_m_p { //Check if the mouse is located in a particular area
        if device_mouse_check_button(0,mb_left) { //Check if left click pressed on device 0
            v_msg_input_sel = 2; //Set input selected to 2
        }
    }
    if v_msg_type = 1 {
        if device_mouse_y_to_gui(0) &gt; y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*2)-v_m_p &amp;&amp; device_mouse_y_to_gui(0) &lt; y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*2)+v_msg_input_h+v_m_p { //Check if the mouse is located in a particular area
            if device_mouse_check_button(0,mb_left) { //Check if left click pressed on device 0
                v_msg_input_sel = 3; //Set input selected to 3
            }
        }
        if device_mouse_y_to_gui(0) &gt; y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*3)-v_m_p &amp;&amp; device_mouse_y_to_gui(0) &lt; y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*3)+v_msg_input_h+v_m_p { //Check if the mouse is located in a particular area
            if device_mouse_check_button(0,mb_left) { //Check if left click pressed on device 0
                v_msg_input_sel = 4; //Set input selected to 4
            }
        }
    }
}
if device_mouse_x_to_gui(0) &gt;= x-v_msg_width-v_msg_padding &amp;&amp; device_mouse_x_to_gui(0) &lt;= x+v_msg_width+v_msg_padding &amp;&amp; device_mouse_y_to_gui(0) &gt;= y+v_msg_height+v_msg_padding &amp;&amp; device_mouse_y_to_gui(0) &lt;= y+v_msg_height+v_msg_padding+v_msg_btn_h {
    if device_mouse_check_button(0,mb_left) { //Check if left clicked on device 0
        v_btn_1_state = "click"; //Set button 1 state to click
    }
    if device_mouse_check_button_pressed(0,mb_left) { //Check if left click pressed on device 0
        if global.snd_fx = true { //Check if sound effect is enabled
            ex_audio_play("sndChoose",0); //Play audio sndChoose
        }
        if global.imm_haptics = true { //Check if immersion haptics is enabled
            immersion_play_effect(2); //Immersion play SHARP CLICK 33
        }
    }
    if device_mouse_check_button_released(0,mb_left) { //Check if left click released on device 0
        v_btn_1_state = "released"; //Set button 1 state to released
        if v_msg_type = 1 { //Check if message type is 1 (register)
            //Nothing yet
        }
        else {
            //Nothing yet
        }
        v_enabled = false; //Disable this message (destroy)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update variables from create event (especially for sizes)
v_msg_width = (400/2)*global.scaling; //Set message width
if v_msg_type = 1 { //Check if message type is 1 (register)
    v_msg_height = (((v_msg_input_h+(v_msg_padding/2))*3)+v_msg_input_h)/2; //Set message height
}
else {
    v_msg_height = ((v_msg_input_h+(v_msg_padding/2))+v_msg_input_h)/2; //Set message height
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controlling object
//Controlling popup
if v_enabled = true { //Check if message is enabled
    global.btn_allow = false; //Don't allow any buttons to be active
    if v_msg_alpha &lt; 1 { //Check if message alpha is smaller than 1
        v_msg_alpha += 0.2; //Increase message alpha by 0.2
    }
}
else {
    y += 5*global.scaling;
    if v_msg_alpha &gt; 0 { //Check if message alpha is bigger than 0
        v_msg_alpha -= 0.1; //Decrease message alpha by 0.2
    }
    else if v_msg_alpha = 0 { //Check if message alpha is 0
        global.btn_allow = true; //Allow any buttons to be active
        instance_destroy(); //Destroy object
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing object
//Draw properties
scr_draw_set_center_alignment();
draw_set_font(v_msg_fnt); //Set message font
draw_set_alpha(v_msg_alpha); //Set message alpha
//Draw popup rectangle
draw_set_colour(make_colour_rgb(0,190,0)); //Set back rectangle colour
draw_rectangle(x-v_msg_width-v_msg_padding-v_m_p,y-v_msg_height-v_msg_padding-v_m_p,x+v_msg_width+v_msg_padding+v_m_p,y+v_msg_height+v_msg_padding+v_msg_btn_h+v_m_p,0); //Draw back rectangle
draw_rectangle_colour(x-v_msg_width-v_msg_padding,y-v_msg_height-v_msg_padding,x+v_msg_width+v_msg_padding,y+v_msg_height+v_msg_padding,make_colour_rgb(40,40,40),make_colour_rgb(10,10,10),make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),0); //Draw fore rectangle
if v_btn_1_state = "click" { //Check if button 1 state is clicked
    draw_rectangle_colour(x-v_msg_width-v_msg_padding,y+v_msg_height+v_msg_padding,x+v_msg_width+v_msg_padding,y+v_msg_height+v_msg_padding+v_msg_btn_h,make_colour_rgb(0,190,0),make_colour_rgb(0,190,0),make_colour_rgb(0,160,0),make_colour_rgb(0,160,0),0); //Draw information message button
}
else {
    draw_rectangle_colour(x-v_msg_width-v_msg_padding,y+v_msg_height+v_msg_padding,x+v_msg_width+v_msg_padding,y+v_msg_height+v_msg_padding+v_msg_btn_h,make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),make_colour_rgb(10,10,10),make_colour_rgb(20,20,20),0); //Draw information message button
}
draw_rectangle_colour(x-v_msg_width-v_msg_padding,y+v_msg_height+v_msg_padding,x,y+v_msg_height+v_msg_padding+v_m_p,make_colour_rgb(0,0,0),make_colour_rgb(0,190,0),make_colour_rgb(0,190,0),make_colour_rgb(0,0,0),0); //Draw separator
draw_rectangle_colour(x,y+v_msg_height+v_msg_padding,x+v_msg_width+v_msg_padding,y+v_msg_height+v_msg_padding+v_m_p,make_colour_rgb(0,190,0),make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),make_colour_rgb(0,190,0),0); //Draw separator
//Inputs
draw_set_halign(fa_left); //Set horizontal align text to left
//Input 1
draw_rectangle(x-v_msg_width-v_m_p,y-v_msg_height-v_m_p,x+v_msg_width+v_m_p,y-v_msg_height+v_msg_input_h+v_m_p,1); //Draw input border
draw_rectangle_colour(x-v_msg_width,y-v_msg_height,x+v_msg_width,y-v_msg_height+v_msg_input_h,make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),make_colour_rgb(20,20,20),make_colour_rgb(10,10,10),0); //Draw input
draw_text_colour(x-v_msg_width+(v_msg_padding/2),y-v_msg_height+(v_msg_input_h/2),v_msg_input_1txt,c_white,c_white,c_white,c_white,0.2); //Draw input text
//Input 2
draw_rectangle(x-v_msg_width-v_m_p,y-v_msg_height+(v_msg_input_h+(v_msg_padding/2))-v_m_p,x+v_msg_width+v_m_p,y-v_msg_height+(v_msg_input_h+(v_msg_padding/2))+v_msg_input_h+v_m_p,1); //Draw input border
draw_rectangle_colour(x-v_msg_width,y-v_msg_height+(v_msg_input_h+(v_msg_padding/2)),x+v_msg_width,y-v_msg_height+(v_msg_input_h+(v_msg_padding/2))+v_msg_input_h,make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),make_colour_rgb(20,20,20),make_colour_rgb(10,10,10),0); //Draw input
draw_text_colour(x-v_msg_width+(v_msg_padding/2),y-v_msg_height+(v_msg_input_h+(v_msg_padding/2))+(v_msg_input_h/2),v_msg_input_2txt,c_white,c_white,c_white,c_white,0.2); //Draw input text
if v_msg_type = 1 { //Check if message type is 1 (register)
    //Input 3
    draw_rectangle(x-v_msg_width-v_m_p,y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*2)-v_m_p,x+v_msg_width+v_m_p,y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*2)+v_msg_input_h+v_m_p,1); //Draw input border
    draw_rectangle_colour(x-v_msg_width,y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*2),x+v_msg_width,y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*2)+v_msg_input_h,make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),make_colour_rgb(20,20,20),make_colour_rgb(10,10,10),0); //Draw input
    draw_text_colour(x-v_msg_width+(v_msg_padding/2),y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*2)+(v_msg_input_h/2),v_msg_input_3txt,c_white,c_white,c_white,c_white,0.2); //Draw input text
    //Input 4
    draw_rectangle(x-v_msg_width-v_m_p,y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*3)-v_m_p,x+v_msg_width+v_m_p,y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*3)+v_msg_input_h+v_m_p,1); //Draw input border
    draw_rectangle_colour(x-v_msg_width,y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*3),x+v_msg_width,y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*3)+v_msg_input_h,make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),make_colour_rgb(20,20,20),make_colour_rgb(10,10,10),0); //Draw input
    draw_text_colour(x-v_msg_width+(v_msg_padding/2),y-v_msg_height+((v_msg_input_h+(v_msg_padding/2))*3)+(v_msg_input_h/2),v_msg_input_4txt,c_white,c_white,c_white,c_white,0.2); //Draw input text
}
draw_set_halign(fa_center); //Set horizontal align text to center
draw_set_colour(c_gray); //Set button 1 text shadow colour
draw_text_ext(x-1,y+v_msg_height+v_msg_padding+(v_msg_btn_h/2)-1,v_msg_btn_1txt,v_msg_fnt_size,v_msg_max_l); //Draw button 1 text shadow
draw_set_colour(c_white); //Set button 1 text colour
draw_text_ext(x,y+v_msg_height+v_msg_padding+(v_msg_btn_h/2),v_msg_btn_1txt,v_msg_fnt_size,v_msg_max_l); //Draw button 1 text
//draw_text(1000,10,string(v_msg_input_sel));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
