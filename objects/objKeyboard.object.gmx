<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defining variables
/*
    This object is imported from another source. Credit to Manuel 777 invadergames.net
*/
//Variables from Damar
v_msg_fnt_size = font_get_size(global.v_msg_fnt)+(font_get_size(global.v_msg_fnt)/2); //Get font size from v_msg_fnt
v_width = global.dvc_width-(v_msg_fnt_size*2);
//Pixelate shader properties
v_shd_pixelate_time = 0; //Set time for pixelate shader
v_shd_pixelate_amount = 0; //Set amount for pixelate shader
surf_shd_pixelate_enable = true; //Enable or disable surface for pixelate shader
surf_shd_pixelate = surface_create(global.v_shd_res_x,global.v_shd_res_y); //Create a surface for pixelate shader
surf_shd_pixelate_xscale = 1; //Set xscale properties for pixelate shader surface
surf_shd_pixelate_yscale = 1; //Set yscale properties for pixelate shader surface
surf_shd_pixelate_angle = 0; //Set angle properties for pixelate shader surface
surf_shd_pixelate_blend = c_white; //Set blend properties for pixelate shader surface
surf_shd_pixelate_alpha = 0.5; //Set alpha properties for pixelate shader surface
view_surface_id[0] = surf_shd_pixelate; //Set view surface id to pixelate shader surface
//Variables from author
global_dpi = (sqrt(display_get_dpi_x() * display_get_dpi_y()) / 120); //Set dot per inch variable
highlight_a = make_color_rgb(0,190,0); //Set a colour for highlighted button
highlight_b = make_color_rgb(0,160,0); //Set b colour for highlighted button
height = max(global.dvc_width, global.dvc_height)*0.4; //Set keyboard height (max)
y_offset = global.dvc_height+height; //Set keyboard y offset
fase = 0; //Set keyboard fase to 0
ease_fase = 0; //Set keyboard easing fase to 0
to = 1; //Set keyboard is enabled
key_go = -1; //Set key enter to unhighlighted to 0
shown_keys = 0; //Set shown keys to 0
mayus = 0; //Shift button
mayus_hold = 0; //Shift button is hold
fline = 0; //Set keyboard fline to 0
sline = 0; //Set keyboard sline to 0
txt_col = c_white;
//Additional variables
scr_keyboard_mapping();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Freeing functions
surface_free(surf_shd_pixelate); //Freeing surface
global.keyboard=-1; //Disable the keyboard
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Backspace repeating interval
/*
    This script was edited by Damar from another source
*/
if (key_back != -1) { //Check if backspace is hold down
    keyboard_string = string_copy(keyboard_string, 1, string_length(keyboard_string)-1); //Delete string before the last
    alarm[1] = 2; //Repeat this event in 8 miliseconds
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Updating variables &amp; controlling shader properties
v_shd_pixelate_time += 0.04; //Update shader time
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controlling object
/*
    This script was edited by Damar from the original source
*/
y_offset = global.dvc_height; //Set y offset to device height
height = max(global.dvc_width, global.dvc_height)*0.35; //Set keyboard height

if to != 0 { //Check if keyboard is easing
    fase += to * 0.04; //Set fase
    ease_fase = keyboard_get_easing(fase, -3*to); //Set easing fase
    v_shd_pixelate_amount = 150+(850*(1-ease_fase));
    y_offset = global.dvc_height+( height * (1-ease_fase)); //Set y offset for easing effect
}
if fase &gt; 1 &amp;&amp; to == 1 { //Check if keyboard is done easing and keyboard is easing up
    to = 0; //Set easing to 1 (done)
    fase = 1; //Set fase to 1 (done)
    ease_fase = 1; //Set easing fase to 1 (done)
    y_offset = global.dvc_height+( height * (1-ease_fase)); //Set y offset
}
if fase &lt; 0 &amp;&amp; to == -1 { //Check if keyboard is done easing and keyboard is easing down
    to = 0; //Set easing to 0 (done)
    fase = 0; //Set fase to 0 (done)
    ease_fase = 0; //Set easing fase to 0 (done)
    y_offset = global.dvc_height+( height * (1-ease_fase)); //Set y offset
    instance_destroy(); //Destroy the instance
}
if key_go==2 { //Check if done button is being released
    if instance_exists(objPop_auth) { //Check if objPop_auth is exists
        var t_obj = objPop_auth; //Set temporary variable t_obj to objPop_auth
        if t_obj.v_msg_input_sel = 1 { //Check if input 1 is selected
            t_obj.v_msg_input_1txt = keyboard_string; //Set input 1 text to keyboard string
        }
        else if t_obj.v_msg_input_sel = 2 { //Check if input 2 is selected
            t_obj.v_msg_input_2txt = keyboard_string; //Set input 2 text to keyboard string
        }
        else if t_obj.v_msg_input_sel = 3 { //Check if input 3 is selected
            t_obj.v_msg_input_3txt = keyboard_string; //Set input 3 text to keyboard string
        }
        else if t_obj.v_msg_input_sel = 4 { //Check if input 4 is selected
            t_obj.v_msg_input_4txt = keyboard_string; //Set input 4 text to keyboard string
        }
    }
    to = -1; //Disable the keyboard
}
if keyboard_check_released(vk_backspace) &amp;&amp; (os_type = os_android || os_type = os_ios) { //Check if backspace button is released
    to = -1; //Disable the keyboard
}
if keyboard_check_released(vk_enter) &amp;&amp; multiple_line = true { //Check if enter button is released and multiple line is enabled
    keyboard_string += "#"; //Add new line
}
if keyboard_check_released(vk_escape) { //Check if escape button is released
    to = -1; //Disable the keyboard
}
if instance_exists(objPop_auth) { //Check if objPop_auth is exists
    var t_obj = objPop_auth; //Set temporary variable t_obj to objPop_auth
    if t_obj.v_msg_input_sel = 1 { //Check if input 1 is selected
        if t_obj.v_msg_type = 1 || t_obj.v_msg_type = 0 { //Check if message type is 1 (register) or 0 (login)
            if scr_string_is_alpha(keyboard_string) || (scr_string_is_alpha(keyboard_string) &amp;&amp; scr_string_is_numeric(keyboard_string)) { //Check string
                txt_col = c_white; //Set text colour to white
            }
            else {
                txt_col = c_red; //Set text colour to red
            }
        }
    }
    if t_obj.v_msg_input_sel = 2 { //Check if input 2 is selected
        if t_obj.v_msg_type = 1 { //Check if message type is 1 (register)
            if scr_string_is_email(keyboard_string) { //Check string
                txt_col = c_white; //Set text colour to white
            }
            else {
                txt_col = c_red; //Set text colour to red
            }
        }
        else {
            if scr_string_is_alpha(keyboard_string) || (scr_string_is_alpha(keyboard_string) &amp;&amp; scr_string_is_numeric(keyboard_string)) { //Check string
                txt_col = c_white; //Set text colour to white
            }
            else {
                txt_col = c_red; //Set text colour to red
            }
        }
    }
    if t_obj.v_msg_input_sel = 3 || t_obj.v_msg_input_sel = 4 { //Check if input 3 or 4 is selected
        if t_obj.v_msg_type = 1 { //Check if message type is 1 (register)
            txt_col = c_white; //Set text colour to white
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing object
if surf_shd_pixelate_enable = true { //Check if pixelate shader is enabled
    /*shader_set(shdScanlines); //Load pixelate shader
    shader_set_uniform_f(shader_get_uniform(shdScanlines,"resolution"),global.v_shd_res_x,global.v_shd_res_y); //Set reso uniform to reso var
    draw_surface_ext(surf_shd_pixelate,view_xview[0],view_yview[0],surf_shd_pixelate_xscale,surf_shd_pixelate_yscale,surf_shd_pixelate_angle,surf_shd_pixelate_blend,surf_shd_pixelate_alpha); //Draw and place shader
    shader_reset();*/
    //Additional shader
    shader_set(shdPixelate); //Load pixelate shader
    shader_set_uniform_f(shader_get_uniform(shdPixelate,"time"),v_shd_pixelate_time); //Set time uniform to time var
    shader_set_uniform_f(shader_get_uniform(shdPixelate, "pixel_amount"),v_shd_pixelate_amount); //Set amount uniform to amount var
    shader_set_uniform_f(shader_get_uniform(shdPixelate,"resolution"),global.v_shd_res_x,global.v_shd_res_y); //Set reso uniform to reso var
    draw_surface_ext(surf_shd_pixelate,view_xview[0],view_yview[0],surf_shd_pixelate_xscale,surf_shd_pixelate_yscale,surf_shd_pixelate_angle,surf_shd_pixelate_blend,surf_shd_pixelate_alpha); //Draw and place shader
    shader_reset();
}
//draw_text(100,150,string(string_pos("#",keyboard_string)));
//Drawing scripts from author
draw_set_alpha(1*ease_fase);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(global.v_msg_fnt); //Set message font

key_grad_a = make_colour_rgb(20,20,20);
key_grad_b = make_colour_rgb(10,10,10);

gradient_a = make_colour_rgb(20,20,20);
gradient_b = make_colour_rgb(0,0,0);
var t_border_size = (2*global.scaling);
draw_rectangle_color(-2,y_offset-height-5,global.dvc_width+2,y_offset+2,make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),make_colour_rgb(40,40,40),make_colour_rgb(10,10,10),0);
draw_rectangle_colour(global.dvc_width/2,y_offset-height-5-t_border_size,0,y_offset-height-5,make_colour_rgb(0,0,0),make_colour_rgb(0,190,0),make_colour_rgb(0,190,0),make_colour_rgb(0,0,0),0); //Draw separator
draw_rectangle_colour(global.dvc_width/2,y_offset-height-5-t_border_size,global.dvc_width,y_offset-height-5,make_colour_rgb(0,190,0),make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),make_colour_rgb(0,190,0),0); //Draw separator

key_h = height/4;
key_w = global.dvc_width/10;

yy = y_offset-height;
ry = y_offset-height
xx = 0;
for (i=0; i&lt;27; i+=1) {
    am_a = (yy-ry)/height;
    am_b = ((yy-ry)+key_h)/height;
    start_col = merge_colour(key_grad_a, key_grad_b, am_a);
    end_col   = merge_colour(key_grad_a, key_grad_b, am_b);
    
    if (shown_keys == 1 &amp;&amp; i &lt; 27) || (shown_keys == 2 &amp;&amp; i &lt; 27) || (shown_keys == 0 &amp;&amp; i &lt; 26) {
        if (mayus != 0) {
            k = keyboard_button_add(xx+5, yy+7, key_w-10, key_h-16, string_upper( keymap[shown_keys,i] ), start_col, end_col, true);
            if (mayus == 1 &amp;&amp; k == 2)
                mayus = 0;
        }
        else {
            keyboard_button_add(xx+5, yy+7, key_w-10, key_h-16, keymap[shown_keys,i], start_col, end_col, true);
        }
        if (i &lt; 10 &amp;&amp; shown_keys == 0) {
            draw_set_halign(fa_right);
            draw_set_valign(fa_top);
            draw_set_font(global.v_msg_fnt);
            draw_text_color(xx+key_w-10, yy+8, keymap[1,i], c_black, c_black, c_black, c_black, 0.8*ease_fase)
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            draw_set_font(global.v_msg_fnt)
            draw_set_alpha(1*ease_fase);
        }
    }

    if (fline == 1) {
        key_mayus = keyboard_button_add(5, yy+7, (key_w*1.5)-10, key_h-16, keymap[shown_keys,27], gradient_a, gradient_a, false);
        key_back = keyboard_button_add(global.dvc_width-(key_w*1.5)+5, yy+7, (key_w*1.5)-10, key_h-16, "BACKSPACE", gradient_a, gradient_a, false);
        if (shown_keys == 0 &amp;&amp; key_mayus == -1) {
            //draw_sprite(sprNav_play, mayus, 5+(key_w*0.75)-5, yy+7+key_h-26);
        }
    }
    fline = 0;
    sline = 0;
    if (i == 9) {
        yy += key_h;
        xx = 0;
        if (shown_keys == 0)
            xx = key_w/2;
    }
    else if (i == 18 &amp;&amp; shown_keys == 0) {
        yy += key_h;
        xx = key_w*1.5;
        fline = 1;
    }
    else if (i == 19 &amp;&amp; shown_keys &gt; 0) {
        yy += key_h;
        xx = key_w*1.5;
        fline = 1;
    }
    else {
        xx += key_w;
    }
    
    if (i == 26) {
        yy += key_h;
        am_a = (yy-ry)/height;
        am_b = ((yy-ry)+key_h)/height;
        start_col = merge_color(key_grad_a, key_grad_b, am_a);
        end_col   = merge_color(key_grad_a, key_grad_b, am_b);
    
        key_change = keyboard_button_add(5, yy+7, (key_w*1.5)-10, key_h-16, keymap[shown_keys,28], gradient_a, gradient_a, false);
        keyboard_button_add((key_w*1.5)+5, yy+7, (key_w)-10, key_h-16, ",", gradient_a, gradient_a, true);
        
        keyboard_button_add((key_w*2.5)+5, yy+7, (key_w*5)-10, key_h-16, " ", start_col, end_col, true);

        keyboard_button_add(global.dvc_width-(key_w*2.5)+5, yy+7, (key_w)-10, key_h-16, ".", gradient_a, gradient_a, true);        
        key_go = keyboard_button_add(global.dvc_width-(key_w*1.5)+5, yy+7, (key_w*1.5)-10, key_h-16, "Done", highlight_a, highlight_b, false);
    }
}

if key_mayus == 2 {
    if (shown_keys == 0) {
        if mayus == 0 {
            mayus = 1;
        }
        else {
            mayus = 0;
        }
    }
    else if (shown_keys == 1) {
        shown_keys = 2;
    }
    else if (shown_keys == 2) {
        shown_keys = 1;
    }
}

if mayus_hold &gt; 60 {
    mayus = 2;
}

if key_mayus != -1 {
    mayus_hold += 1;
}
else {
    mayus_hold = 0;
}

if key_change == 2 {
    shown_keys += 1;
    if shown_keys &gt; 1 {
        shown_keys = 0;
    }
}

if (key_back == 1) {
    alarm[0] = 1;
}

draw_set_halign(fa_left); //Set horizontal align to left
draw_set_valign(fa_top); //Set vertical align to top
if instance_exists(objPop_auth) { //Check if objPop_auth is exists
    var t_obj = objPop_auth; //Set temporary variable t_obj to objPop_auth
    if t_obj.v_msg_input_sel = 2 { //Check if input 2 is selected
        if t_obj.v_msg_type = 0 { //Check if message type is 0 (login)
            draw_set_font(global.v_pwd_fnt); //Set password font
            draw_set_colour(c_gray); //Set text colour to gray
            draw_text(v_msg_fnt_size-1,v_msg_fnt_size-1,scr_string_wordwrap_width(scr_string_mask("•",keyboard_string),v_width,"#",true)); //Draw text shadow
            draw_set_colour(txt_col); //Set text colour to white
            draw_text(v_msg_fnt_size,v_msg_fnt_size,scr_string_wordwrap_width(scr_string_mask("•",keyboard_string),v_width,"#",true)); //Draw text
            draw_set_font(global.v_msg_fnt); //Set message font
        }
        else {
            draw_set_colour(c_gray); //Set text colour to gray
            draw_text(v_msg_fnt_size-1,v_msg_fnt_size-1,scr_string_wordwrap_width(keyboard_string,v_width,"#",true)); //Draw text shadow
            draw_set_colour(txt_col); //Set text colour to white
            draw_text(v_msg_fnt_size,v_msg_fnt_size,scr_string_wordwrap_width(keyboard_string,v_width,"#",true)); //Draw text
        }
    }
    else if t_obj.v_msg_input_sel = 3 { //Check if input 3 is selected
        draw_set_font(global.v_pwd_fnt); //Set password font
        draw_set_colour(c_gray); //Set text colour to gray
        draw_text(v_msg_fnt_size-1,v_msg_fnt_size-1,scr_string_wordwrap_width(scr_string_mask("•",keyboard_string),v_width,"#",true)); //Draw text shadow
        draw_set_colour(txt_col); //Set text colour to white
        draw_text(v_msg_fnt_size,v_msg_fnt_size,scr_string_wordwrap_width(scr_string_mask("•",keyboard_string),v_width,"#",true)); //Draw text
        draw_set_font(global.v_msg_fnt); //Set message font
    }
    else if t_obj.v_msg_input_sel = 4 { //Check if input 4 is selected
        draw_set_font(global.v_pwd_fnt); //Set password font
        draw_set_colour(c_gray); //Set text colour to gray
        draw_text(v_msg_fnt_size-1,v_msg_fnt_size-1,scr_string_wordwrap_width(scr_string_mask("•",keyboard_string),v_width,"#",true)); //Draw text shadow
        draw_set_colour(txt_col); //Set text colour to white
        draw_text(v_msg_fnt_size,v_msg_fnt_size,scr_string_wordwrap_width(scr_string_mask("•",keyboard_string),v_width,"#",true)); //Draw text
        draw_set_font(global.v_msg_fnt); //Set message font
    }
    else {
        draw_set_colour(c_gray); //Set text colour to gray
        draw_text(v_msg_fnt_size-1,v_msg_fnt_size-1,scr_string_wordwrap_width(keyboard_string,v_width,"#",true)); //Draw text shadow
        draw_set_colour(txt_col); //Set text colour to white
        draw_text(v_msg_fnt_size,v_msg_fnt_size,scr_string_wordwrap_width(keyboard_string,v_width,"#",true)); //Draw text
    }
}
else {
    draw_set_colour(c_gray); //Set text colour to gray
    draw_text(v_msg_fnt_size-1,v_msg_fnt_size-1,scr_string_wordwrap_width(keyboard_string,v_width,"#",true)); //Draw text shadow
    draw_set_colour(txt_col); //Set text colour to white
    draw_text(v_msg_fnt_size,v_msg_fnt_size,scr_string_wordwrap_width(keyboard_string,v_width,"#",true)); //Draw text
}
scr_draw_reset(); //Reset all drawings
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
