<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defining variables
v_http_id = noone; //Set http id
view_enabled = true; //Enabling view feature
view_visible[0] = true; //Enabling view 0 visibility
view_visible[1] = true; //Enabling view 1 visibility
global.dvc_width = display_get_width(); //Defining display width var to display width function
global.dvc_height = display_get_height(); //Defining display height var to display heihgt function
global.dvc_ratio = global.dvc_width/global.dvc_height; //Defining device display ratio (if needed)
//Another important variables
global.btn_nav = 1; //Navigation index
global.btn_enable = 0; //Global buttons state
global.popup_type = 2 //If global.popup type = 2 it will show confirm message (yesno) else information message (ok)
global.main_options = scr_string_encrypt("main_options",os_get_language())+".enc"; //Ini file name
//Check device reso
if (global.dvc_width &lt; 960 &amp;&amp; global.dvc_height &lt; 540) { //Check if device reso is smaller than qHD
    global.dvc_width = 960;
    global.dvc_height = 540;
    global.scaling = 1; //Scaling var for all sprite image
    global.v_msg_fnt = fnt_mes_1; //Set message font based on global.scaling
    global.v_spl_fnt_trademark = fnt_spl_cop_1; //Set splash copyright font based on global.scaling
    global.v_pwd_fnt = fnt_pwd_1; //Set password font based on global.scaling
}
else if ((global.dvc_width &gt;= 960 &amp;&amp; global.dvc_height &gt;= 540) &amp;&amp; (global.dvc_width &lt; 1280 &amp;&amp; global.dvc_height &lt; 720)) { //Check if device reso is same as qHD or bigger, but still smaller than HD
    global.scaling = 1; //Scaling var for all sprite image
    global.v_msg_fnt = fnt_mes_1; //Set font based on global.scaling
    global.v_spl_fnt_trademark = fnt_spl_cop_1; //Set splash copyright font based on global.scaling
    global.v_pwd_fnt = fnt_pwd_1; //Set password font based on global.scaling
}
else if ((global.dvc_width &gt;= 1280 &amp;&amp; global.dvc_height &gt;= 720) &amp;&amp; (global.dvc_width &lt; 1920 &amp;&amp; global.dvc_height &lt; 1080)) { //Check if device reso is same as HD or bigger, but still smaller than FHD
    global.scaling = 1.5; //Scaling var for all sprite image
    global.v_msg_fnt = fnt_mes_1_5; //Set font based on global.scaling
    global.v_spl_fnt_trademark = fnt_spl_cop_1_5; //Set splash copyright font based on global.scaling
    global.v_pwd_fnt = fnt_pwd_1_5; //Set password font based on global.scaling
}
else if ((global.dvc_width &gt;= 1920 &amp;&amp; global.dvc_height &gt;= 1080) &amp;&amp; (global.dvc_width &lt; 2560 &amp;&amp; global.dvc_height &lt; 1440)) { //Check if device reso is same as FHD or bigger, but still smaller than QHD (Quad HD)
    global.scaling = 2; //Scaling var for all sprite image
    global.v_msg_fnt = fnt_mes_2; //Set font based on global.scaling
    global.v_spl_fnt_trademark = fnt_spl_cop_2; //Set splash copyright font based on global.scaling
    global.v_pwd_fnt = fnt_pwd_2; //Set password font based on global.scaling
}
else if (global.dvc_width &gt;= 2560 &amp;&amp; global.dvc_height &gt;= 1440) { //Check if device reso is bigger than QHD
    global.scaling = 2.5; //Scaling var for all sprite image
    global.v_msg_fnt = fnt_mes_2_5; //Set font based on global.scaling
    global.v_spl_fnt_trademark = fnt_spl_cop_2_5; //Set splash copyright font based on global.scaling
    global.v_pwd_fnt = fnt_pwd_2_5; //Set password font based on global.scaling
}
display_set_gui_size(global.dvc_width,global.dvc_height); //Set GUI size based on display vars
scr_resize_surface_app(); //Resizing display using custom script
//Disable power saving if os android/ios
if os_type == os_android || os_type == os_ios {
    os_powersave_enable(false); //Disable power saving
}
//Scripts initialization
scr_sounds_load(); //Init sound names
//Additional variables
global.btn_allow = true;
global.passport_email = "";
//Data structures
global.v_ds_map_settings_filename = working_directory+"settings.dat"; //Set settings data structure map filename
global.v_ds_map_user_filename = working_directory+"user.dat"; //Set user data structure map filename
//Ds map settings
if file_exists(global.v_ds_map_settings_filename) { //Check if ds map settings file is exists
    global.v_ds_map_settings = ds_map_secure_load(global.v_ds_map_settings_filename); //Load ds map settings
}
else {
    global.v_ds_map_settings = ds_map_create(); //Create ds map settings
    ds_map_add(global.v_ds_map_settings,"imm_haptics",true); //Add immersion haptics setting to ds map settings
    ds_map_add(global.v_ds_map_settings,"snd_music",true); //Add sound music setting to ds map settings
    ds_map_add(global.v_ds_map_settings,"snd_fx",true); //Add sound effect setting to ds map settings
    ds_map_secure_save(global.v_ds_map_settings,global.v_ds_map_settings_filename); //Save ds map settings
}
global.imm_haptics = ds_map_find_value(global.v_ds_map_settings,"imm_haptics"); //Find immersion haptics setting
global.snd_music = ds_map_find_value(global.v_ds_map_settings,"snd_music"); //Find sound music setting
global.snd_fx = ds_map_find_value(global.v_ds_map_settings,"snd_fx"); //Find sound effect setting
//Ds map user
if file_exists(global.v_ds_map_user_filename) { //Check if ds map user file is exists
    global.v_ds_map_user = ds_map_secure_load(global.v_ds_map_user_filename); //Load ds map user
}
else {
    global.v_ds_map_user = ds_map_create(); //Create ds map user
    ds_map_add(global.v_ds_map_user,"first_time",true); //Add first time usage to ds map user
    ds_map_add(global.v_ds_map_user,"dp_uid",0); //Add user id to ds map user
    ds_map_add(global.v_ds_map_user,"dp_email","undefined"); //Add user email to ds map user
    ds_map_add(global.v_ds_map_user,"dp_uname","undefined"); //Add username to ds map user
    ds_map_add(global.v_ds_map_user,"dp_pass","undefined"); //Add user password to ds map user
    ds_map_add(global.v_ds_map_user,"dp_verified",false); //Add email verified status to ds map user
    ds_map_add(global.v_ds_map_user,"dp_role","undefined"); //Add user role to ds map user
    ds_map_add(global.v_ds_map_user,"dp_ucredits",0); //Add user credits to ds map user
    ds_map_add(global.v_ds_map_user,"dp_uscredits",0); //Add user special credits to ds map user
    ds_map_add(global.v_ds_map_user,"dp_ldate","undefined"); //Add user last login date to ds map user
    ds_map_secure_save(global.v_ds_map_user,global.v_ds_map_user_filename); //Save ds map user
}
global.user_first_time = ds_map_find_value(global.v_ds_map_user,"first_time"); //Find first time usage
global.dp_uid = ds_map_find_value(global.v_ds_map_user,"dp_uid"); //Find user id
global.dp_email = ds_map_find_value(global.v_ds_map_user,"dp_email"); //Find user email
global.dp_uname = ds_map_find_value(global.v_ds_map_user,"dp_uname"); //Find username
global.dp_pass = ds_map_find_value(global.v_ds_map_user,"dp_pass"); //Find user password
global.dp_verified = ds_map_find_value(global.v_ds_map_user,"dp_verified"); //Find user verified status
global.dp_role = ds_map_find_value(global.v_ds_map_user,"dp_role"); //Find user role
global.dp_ucredits = ds_map_find_value(global.v_ds_map_user,"dp_ucredits"); //Find user credits
global.dp_uscredits = ds_map_find_value(global.v_ds_map_user,"dp_uscredits"); //Find user special credits
global.dp_ldate = ds_map_find_value(global.v_ds_map_user,"dp_ldate"); //Find user last login date
cursor_sprite = sprCursor; //Set cursor
//THIS OBJECT SHOULD BE CREATED AT ALL ROOMS WITHOUT EXCEPTIONS! (Damar)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initializing shader &amp; surfaces
global.v_shd_res_x = display_get_gui_width(); //Set reso x for scanlines shader
global.v_shd_res_y = display_get_gui_height(); //Set reso y for scanlines shader
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connecting to server
var v_http_result = ds_map_find_value(async_load,"result"); //Set temporary variable of http result
if ds_map_find_value(async_load,"status") == 0 { //Check if http status is 0 (success)
    if v_http_result = "Verification email sent to "+global.passport_email+"! Please wait for 1-5 minutes if the email has not been received." { //Check result
        scr_pop_mes(string(v_http_result),1,"","","Ok","",1); //Show result message
    }
    else if v_http_result = "" { //Check if http result is nothing
        scr_pop_mes("Connection timed out.",1,"","","Retry","",1); //Show message
    }
    else {
        
    }
}
else { //Handle error for all http event
    if instance_exists(objPop_auth) { //Check instance is exists
        if ds_map_find_value(async_load,"id") = objPop_auth.v_http_id { //Check http id
            scr_pop_mes("Unfortunately, the server is not responding.",1,"","","Close","",0); //Show message
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Freeing memory
//font_delete(global.v_msg_fnt);
ds_map_destroy(global.v_ds_map_settings); //Destroy settings ds map
ds_map_destroy(global.v_ds_map_user); //Destroy user ds map
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/**//*draw_text(100,100,string(global.dp_uid));
draw_text(100,100+20,global.dp_email);
draw_text(100,100+40,string(global.dp_uname)+"|||"+string(global.user_first_time));
draw_text(100,100+60,string(global.dp_verified));
draw_text(100,100+80,global.dp_role);
draw_text(100,100+100,string(global.dp_ucredits));
draw_text(100,100+120,string(global.dp_uscredits));
draw_text(100,100+140,global.dp_ldate);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing properties
if !draw_get_swf_aa_level() = 0 { //Check if swf anti aliasing is 0
    draw_enable_swf_aa(true); //Enable anti aliasing for swf
}
else {
    draw_set_swf_aa_level(1); //Set anti aliasing for swf to 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
