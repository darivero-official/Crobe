<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define variables
//Messaging variables
v_msg_fnt = global.v_msg_fnt; //Set font
v_msg_important = global.v_msg_important;//Set message important
v_msg_alpha = 0; //Set message popup alpha to 0
v_msg_padding = 20*global.scaling; //Set message padding
v_msg_fnt_size = font_get_size(v_msg_fnt)+(font_get_size(v_msg_fnt)/2); //Get font size from v_msg_fnt
v_msg_width = 0; //Set message width
v_msg_height = 0; //Set message height
v_msg_max_l = display_get_gui_width()*(5/8); //Set message max length (in pixels)
v_msg_l = string_length(global.v_msg); //Set message length
if !global.v_msg_type = 0 { //Check if not notification message
    v_msg_btn_h = 36*global.scaling; //Set message buttons height
}
else {
    v_msg_btn_h = 0; //No button
}
//Additional variables
v_enabled = true; //Set message is enabled
v_m_p = 1*global.scaling; //Border
v_msg_letter_time = 0; //Set type write time to 0
v_msg_letter_spd = 1; //Set type write speed to 1
v_msg_letter_print = ""; //Set type write print to ""
v_btn_1_state = "released"; //Set button 1 state to released
v_btn_2_state = "released"; //Set button 2 state to released
v_end = ""; //Set ending execution
//Brightness contrast shader properties
if v_msg_important = 1 { //Check if message is important
    v_shd_bc_contrast_amount_max = -0.5; //Set contrast max amount to -0.5
}
else if v_msg_important = 1.5 { //Check if message is very important
    v_shd_bc_contrast_amount_max = -0.7; //Set contrast max amount to -0.7
}
else {
    v_shd_bc_contrast_amount_max = -0.3; //Set contrast max amount to -0.3
}
surf_shd_bc = surface_create(global.v_shd_res_x,global.v_shd_res_y); //Create a surface for brightness contrast shader
surf_shd_bc_xscale = 1; //Set xscale properties for brightness contrast shader surface
surf_shd_bc_yscale = 1; //Set yscale properties for brightness contrast shader surface
surf_shd_bc_angle = 0; //Set angle properties for brightness contrast shader surface
surf_shd_bc_blend = c_white; //Set blend properties for brightness contrast shader surface
surf_shd_bc_alpha = 0.5; //Set alpha properties for brightness contrast shader surface
view_surface_id[0] = surf_shd_bc; //Set view surface id to brightness contrast shader surface
v_shd_bc_brightness_amount = 0; //Set brightness amount for brightness contrast shader
v_shd_bc_contrast_amount = 0; //Set contrast amount for brightness contrast shader
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controlling buttons
if device_mouse_y_to_gui(0) &gt;= y+v_msg_height+v_msg_padding &amp;&amp; device_mouse_y_to_gui(0) &lt;= y+v_msg_height+v_msg_padding+v_msg_btn_h { //Check if the mouse is located in a particular area
    //Information message
    if device_mouse_x_to_gui(0) &gt;= x-v_msg_width-v_msg_padding &amp;&amp; device_mouse_x_to_gui(0) &lt;= x+v_msg_width+v_msg_padding { //Check if the mouse is located in a particular area
        if global.v_msg_type = 1 { //Check if information message
            if device_mouse_check_button(0,mb_left) { //Check if left clicked on device 0
                v_btn_1_state = "click"; //Set button 1 state to click
            }
            if device_mouse_check_button_pressed(0,mb_left) { //Check if left click pressed on device 0
                if global.snd_fx = true { //Check if sound effect is enabled
                    ex_audio_play("sndChoose",0); //Play audio sndChoose
                }
                if global.imm_haptics = true { //Check if immersion haptics is enabled
                    immersion_play_effect(2); //Immersion play SHARP CLICK 33
                }
            }
            if device_mouse_check_button_released(0,mb_left) { //Check if left click released on device 0
                v_btn_1_state = "released"; //Set button 1 state to released
                switch(global.v_msg_btn_1) {
                    case "exit":
                        game_end(); //Exit the game
                    break;
                }
                v_enabled = false; //Disable this message (destroy)
            }
        }
    }
    //Confirmation
    if device_mouse_x_to_gui(0) &gt;= x-v_msg_width-v_msg_padding &amp;&amp; device_mouse_x_to_gui(0) &lt; x { //Check if the mouse is located in a particular area
        if global.v_msg_type = 2 { //Check if confirmation message
            if device_mouse_check_button(0,mb_left) { //Check if left clicked on device 0
                v_btn_1_state = "click"; //Set button 1 state to click
            }
            if device_mouse_check_button_pressed(0,mb_left) { //Check if left click pressed on device 0
                if global.snd_fx = true { //Check if sound effect is enabled
                    ex_audio_play("sndChoose",0); //Play audio sndChoose
                }
                if global.imm_haptics = true { //Check if immersion haptics is enabled
                    immersion_play_effect(2); //Immersion play SHARP CLICK 33
                }
            }
            if device_mouse_check_button_released(0,mb_left) { //Check if left click released on device 0
                v_btn_1_state = "released"; //Set button 1 state to released
                switch(global.v_msg_btn_1) {
                    case "exit":
                        game_end(); //Exit the game
                    break;
                    case "msg_first_time": //First time message
                        if os_is_network_connected() = true { //Check if connection is available
                            scr_pop_mes("Crobe taking a direct connection to Darivero Passport. Connections can be switched off after that, but the connection is still required at the time you perform a backup, login, or buy something.",2,"msg_first_time_conn","exit","Continue","Exit",1.5); //Display confirmation message
                        }
                        else {
                            scr_pop_mes("No internet connection available. Please try again later.",1,"exit",0,"Exit",0,true); //Display information message
                        }
                    break;
                    case "msg_first_time_conn": //First time connection
                        scr_pop_mes("Already have an account?",2,"pass_reg","pass_log","Register","Login",1); //Display confirmation message
                    break;
                    case "pass_reg":
                        v_end = "pass_reg"; //Set ending execution
                    break;
                }
                v_enabled = false; //Disable this message (destroy)
            }
        }
    }
    if device_mouse_x_to_gui(0) &gt;= x &amp;&amp; device_mouse_x_to_gui(0) &lt; x+v_msg_width+v_msg_padding { //Check if the mouse is located in a particular area
        if global.v_msg_type = 2 { //Check if confirmation message
            if device_mouse_check_button(0,mb_left) { //Check if left clicked on device 0
                v_btn_2_state = "click"; //Set button 2 state to click
            }
            if device_mouse_check_button_pressed(0,mb_left) { //Check if left click pressed on device 0
                if global.snd_fx = true { //Check if sound effect is enabled
                    ex_audio_play("sndChoose",0); //Play audio sndChoose
                }
                if global.imm_haptics = true { //Check if immersion haptics is enabled
                    immersion_play_effect(2); //Immersion play SHARP CLICK 33
                }
            }
            if device_mouse_check_button_released(0,mb_left) { //Check if left click released on device 0
                v_btn_2_state = "released"; //Set button 2 state to released
                switch(global.v_msg_btn_2) {
                    case "exit": //Exit
                        game_end(); //Exit the game
                    break;
                    case "pass_log":
                        v_end = "pass_log"; //Set ending execution
                    break;
                }
                v_enabled = false; //Disable this message (destroy)
            }
        }
    }
}
if keyboard_check_released(vk_backspace) { //Check if user release back key
    v_enabled = false; //Disable this message (destroy)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update variables from create event (especially for sizes)
v_msg_width = (string_width_ext(global.v_msg,v_msg_fnt_size,v_msg_max_l)/2); //Set message width
v_msg_height = (string_height_ext(global.v_msg,v_msg_fnt_size,v_msg_max_l)/2); //Set message height
if !global.v_msg_type = 0 { //Check if notification message
    v_msg_btn_h = 40*global.scaling; //Set message buttons height
}
else {
    v_msg_btn_h = 0; //No button
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controlling object
//Controlling popup
if v_enabled = true { //Check if message is enabled
    global.btn_allow = false; //Don't allow any buttons to be active
    if v_msg_alpha &lt; 1 { //Check if message alpha is smaller than 1
        v_msg_alpha += 0.2; //Increase message alpha by 0.2
    }
    if v_shd_bc_contrast_amount &gt; v_shd_bc_contrast_amount_max { //Check if contrast amount is bigger than contrast amount max
        v_shd_bc_contrast_amount -= 0.1; //Decrease contrast amount by 0.1
    }
}
else {
    y += 5*global.scaling;
    if v_msg_alpha &gt; 0 { //Check if message alpha is bigger than 0
        v_msg_alpha -= 0.1; //Decrease message alpha by 0.2
    }
    else if v_msg_alpha = 0 { //Check if message alpha is 0
        global.btn_allow = true; //Allow any buttons to be active
        if v_end = "pass_reg" {
            scr_pop_auth(1); //Display register popup
        }
        else if v_end = "pass_log" {
            scr_pop_auth(0); //Display login popup
        }
        instance_destroy(); //Destroy object
    }
    if v_shd_bc_contrast_amount &lt; 0 { //Check if contrast amount is smaller than 0
        v_shd_bc_contrast_amount += 0.1; //Increase contrast amount by 0.1
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing object
///Shader creation Brightness contrast
if v_msg_important = 1 || v_msg_important = 1.5 { //Check if message is important
    shader_set(shdBc); //Load brightness contrast shader
    shader_set_uniform_f(shader_get_uniform(shdBc,"brightness_amount"),v_shd_bc_brightness_amount); //Set uniform brightness amount for brightness contrast shader
    shader_set_uniform_f(shader_get_uniform(shdBc,"contrast_amount"),v_shd_bc_contrast_amount); //Set uniform contrast amount for brightness contrast shader
    draw_surface_ext(surf_shd_bc,view_xview[0],view_yview[0],surf_shd_bc_xscale,surf_shd_bc_yscale,surf_shd_bc_angle,surf_shd_bc_blend,surf_shd_bc_alpha); //Draw and place shader
    shader_reset();
    //Additional shader (uses brightness contrast shader properties)
    shader_set(shdBlur); //Load blur shader
    draw_surface_ext(surf_shd_bc,view_xview[0],view_yview[0],surf_shd_bc_xscale,surf_shd_bc_yscale,surf_shd_bc_angle,surf_shd_bc_blend,surf_shd_bc_alpha); //Draw and place shader
    shader_reset();
}
//Draw properties
scr_draw_set_center_alignment();
draw_set_font(v_msg_fnt); //Set message font
draw_set_alpha(v_msg_alpha); //Set message alpha
//Draw popup rectangle
draw_set_colour(make_colour_rgb(0,190,0)); //Set back rectangle colour
draw_rectangle(x-v_msg_width-v_msg_padding-v_m_p,y-v_msg_height-v_msg_padding-v_m_p,x+v_msg_width+v_msg_padding+v_m_p,y+v_msg_height+v_msg_padding+v_msg_btn_h+v_m_p,0); //Draw back rectangle
draw_rectangle_colour(x-v_msg_width-v_msg_padding,y-v_msg_height-v_msg_padding,x+v_msg_width+v_msg_padding,y+v_msg_height+v_msg_padding,make_colour_rgb(40,40,40),make_colour_rgb(10,10,10),make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),0); //Draw fore rectangle
//Draw message buttons
if global.v_msg_type = 1 { //Check if information message
    if v_btn_1_state = "click" { //Check if button 1 state is clicked
        draw_rectangle_colour(x-v_msg_width-v_msg_padding,y+v_msg_height+v_msg_padding,x+v_msg_width+v_msg_padding,y+v_msg_height+v_msg_padding+v_msg_btn_h,make_colour_rgb(0,190,0),make_colour_rgb(0,190,0),make_colour_rgb(0,160,0),make_colour_rgb(0,160,0),0); //Draw information message button
    }
    else {
        draw_rectangle_colour(x-v_msg_width-v_msg_padding,y+v_msg_height+v_msg_padding,x+v_msg_width+v_msg_padding,y+v_msg_height+v_msg_padding+v_msg_btn_h,make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),make_colour_rgb(10,10,10),make_colour_rgb(20,20,20),0); //Draw information message button
    }
    draw_set_colour(c_gray); //Set button 1 text shadow colour
    draw_text_ext(x-1,y+v_msg_height+v_msg_padding+(v_msg_btn_h/2)-1,global.v_msg_btn_1txt,v_msg_fnt_size,v_msg_max_l); //Draw button 1 text shadow
    draw_set_colour(c_white); //Set button 1 text colour
    draw_text_ext(x,y+v_msg_height+v_msg_padding+(v_msg_btn_h/2),global.v_msg_btn_1txt,v_msg_fnt_size,v_msg_max_l); //Draw button 1 text
}
else if global.v_msg_type = 2 { //Check if confirmation message
    if v_btn_1_state = "click" { //Check if button 1 state is clicked
        draw_rectangle_colour(x-v_msg_width-v_msg_padding,y+v_msg_height+v_msg_padding,x,y+v_msg_height+v_msg_padding+v_msg_btn_h,make_colour_rgb(0,190,0),make_colour_rgb(0,190,0),make_colour_rgb(0,160,0),make_colour_rgb(0,160,0),0); //Draw first confirmation message button
    }
    else {
        draw_rectangle_colour(x-v_msg_width-v_msg_padding,y+v_msg_height+v_msg_padding,x,y+v_msg_height+v_msg_padding+v_msg_btn_h,make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),make_colour_rgb(10,10,10),make_colour_rgb(20,20,20),0); //Draw first confirmation message button
    }
    if v_btn_2_state = "click" { //Check if button 2 state is clicked
        draw_rectangle_colour(x,y+v_msg_height+v_msg_padding,x+v_msg_width+v_msg_padding,y+v_msg_height+v_msg_padding+v_msg_btn_h,make_colour_rgb(0,190,0),make_colour_rgb(0,190,0),make_colour_rgb(0,160,0),make_colour_rgb(0,160,0),0); //Draw second confirmation message button
    }
    else {
        draw_rectangle_colour(x,y+v_msg_height+v_msg_padding,x+v_msg_width+v_msg_padding,y+v_msg_height+v_msg_padding+v_msg_btn_h,make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),make_colour_rgb(20,20,20),make_colour_rgb(10,10,10),0); //Draw second confirmation message button
    }
    draw_set_colour(c_gray); //Set button 1 text shadow colour
    draw_text_ext(x-(v_msg_width/2)-v_msg_padding-1,y+v_msg_height+v_msg_padding+(v_msg_btn_h/2)-1,global.v_msg_btn_1txt,v_msg_fnt_size,v_msg_max_l); //Draw button 1 text shadow
    draw_set_colour(c_white); //Set button 1 text colour
    draw_text_ext(x-(v_msg_width/2)-v_msg_padding,y+v_msg_height+v_msg_padding+(v_msg_btn_h/2),global.v_msg_btn_1txt,v_msg_fnt_size,v_msg_max_l); //Draw button 1 text
    draw_set_colour(c_gray); //Set button 2 text shadow colour
    draw_text_ext(x+(v_msg_width/2)+v_msg_padding-1,y+v_msg_height+v_msg_padding+(v_msg_btn_h/2)-1,global.v_msg_btn_2txt,v_msg_fnt_size,v_msg_max_l); //Draw button 2 text shadow
    draw_set_colour(c_white); //Set button 2 text colour
    draw_text_ext(x+(v_msg_width/2)+v_msg_padding,y+v_msg_height+v_msg_padding+(v_msg_btn_h/2),global.v_msg_btn_2txt,v_msg_fnt_size,v_msg_max_l); //Draw button 2 text
}
if global.v_msg_type = 1 || global.v_msg_type = 2 { //Check message type
    draw_rectangle_colour(x-v_msg_width-v_msg_padding,y+v_msg_height+v_msg_padding,x,y+v_msg_height+v_msg_padding+v_m_p,make_colour_rgb(0,0,0),make_colour_rgb(0,190,0),make_colour_rgb(0,190,0),make_colour_rgb(0,0,0),0); //Draw separator
    draw_rectangle_colour(x,y+v_msg_height+v_msg_padding,x+v_msg_width+v_msg_padding,y+v_msg_height+v_msg_padding+v_m_p,make_colour_rgb(0,190,0),make_colour_rgb(0,0,0),make_colour_rgb(0,0,0),make_colour_rgb(0,190,0),0); //Draw separator
    if global.v_msg_type = 2 { //Check if confirmation message
        draw_rectangle_colour(x-(v_m_p/2),y+v_msg_height+v_msg_padding,x+(v_m_p/2),y+v_msg_height+v_msg_padding+v_msg_btn_h,make_colour_rgb(0,190,0),make_colour_rgb(0,190,0),make_colour_rgb(10,10,10),make_colour_rgb(10,10,10),0); //Draw separator
    }
}
//Draw text
if (v_msg_letter_time &lt; v_msg_l) { //Check if time is smaller than message length (for type writer effect)
    if global.snd_fx = true {
        ex_audio_play("sndTick_tiny",0); //Play audio sndTick_tiny
    }
    v_msg_letter_time += v_msg_letter_spd; //Increase time by spd
    v_msg_letter_print = string_copy(global.v_msg,0,v_msg_letter_time); //Copy the text and send it to draw text
}
draw_set_colour(c_gray); //Set message text shadow colour
draw_text_ext(x-1,y-1,v_msg_letter_print,v_msg_fnt_size,v_msg_max_l); //Draw message text shadow
draw_set_colour(c_white); //Set message text colour
draw_text_ext(x,y,v_msg_letter_print,v_msg_fnt_size,v_msg_max_l); //Draw message text
scr_draw_reset(); //Reset all draw
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
