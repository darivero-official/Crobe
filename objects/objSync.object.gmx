<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defining variables
v_dp_uname = global.dp_uname;
v_dp_pass = string_encrypt(global.dp_pass,salt);
v_http_id_uid = passport_signin(v_dp_uname,v_dp_pass,"dp_uid"); //Read user id
v_http_id_email = noone; //Set user email address
v_http_id_uname = noone; //Set user name
v_http_id_pass = noone; //Set user password
v_http_id_verified = noone; //Set user verified
v_http_id_role = noone; //Set user role
v_http_id_ucredits = noone; //Set user credits
v_http_id_uscredits = noone; //Set user special credits
v_http_id_ldate = noone; //Set user last login
v_txt_details = "Retrieving user id..."; //Set text details
v_process = 0; //Set process position
v_alarm = -1; //Set alarm timer to -1 (disabled)
popup_loading(v_txt_details); //Show loading popup
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When destroyed
if v_process = 7 { //If process is 7 (completed)
    popup_loading("v_destroy"); //Destroy loading text
    if instance_exists(objSplash) { //Check if objSplash is exists
        objSplash.v_image_turn = 4; //Set image turn to 4
        objSplash.v_image_chance = 1; //Set image chance to 1 (give chance to turn 2 show up)
    }
}
else {
    popup_loading("v_destroy"); //Destroy loading text
    popup_message("Failed to parse data from passport.",2,"pass_log","","Login","Cancel",1); //Show message
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controlling object
//Controlling popup
if v_alarm &gt; 0 { //Check if alarm timer is bigger than 0
    v_alarm -= 1; //Decrease alarm timer by 1
}
if v_alarm = 1 { //Check if alarm timer is 1
    instance_destroy(); //Destroy instance
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connecting to server
if ds_map_find_value(async_load,"id") == v_http_id_uid { //Check http id
    if ds_map_find_value(async_load,"status") == 0 { //Check if status is 0 (success)
        var v_http_result = ds_map_find_value(async_load,"result"); //Set temporary variable of http result
        if string_length(v_http_result) &lt;= 10 { //Check if result length is smaller than 10 chars
            global.dp_uid = real(ds_map_add_replace(global.v_ds_map_user,"dp_uid",v_http_result,true)); //Replace user id to the new value
            v_txt_details = "Retrieving user email address..."; //Set text details
            popup_loading(v_txt_details); //Update loading text
            v_process += 1; //Increase process by 1
        }
        v_http_id_email = passport_signin(v_dp_uname,v_dp_pass,"dp_email"); //Read user email address
    }
}
if ds_map_find_value(async_load,"id") == v_http_id_email { //Check http id
    if ds_map_find_value(async_load,"status") == 0 { //Check if status is 0 (success)
        var v_http_result = ds_map_find_value(async_load,"result"); //Set temporary variable of http result
        if !v_http_result = "Cannot retrieve data! Contact us for this error." and string_length(v_http_result) &lt;= 255 { //Check result and result length is smaller than 10 chars
            global.dp_email = ds_map_add_replace(global.v_ds_map_user,"dp_email",v_http_result,true); //Replace user email to the new value
            v_txt_details = "Retrieving user status..."; //Set text details
            popup_loading(v_txt_details); //Update loading text
            v_process += 1; //Increase process by 1
        }
        v_http_id_verified = passport_signin(v_dp_uname,v_dp_pass,"dp_verified"); //Read user verified
    }
}
if ds_map_find_value(async_load,"id") == v_http_id_verified { //Check http id
    if ds_map_find_value(async_load,"status") == 0 { //Check if status is 0 (success)
        var v_http_result = ds_map_find_value(async_load,"result"); //Set temporary variable of http result
        if string_length(v_http_result) &lt;= 2 &amp;&amp; string_length(v_http_result) &gt;= 0 { //Check if result length is smaller than 10 chars
            global.dp_verified = real(ds_map_add_replace(global.v_ds_map_user,"dp_verified",v_http_result,true)); //Replace user verified status to the new value
            v_txt_details = "Retrieving user role..."; //Set text details
            popup_loading(v_txt_details); //Update loading text
            v_process += 1; //Increase process by 1
        }
        v_http_id_role = passport_signin(v_dp_uname,v_dp_pass,"dp_role"); //Read user role
    }
}
if ds_map_find_value(async_load,"id") == v_http_id_role { //Check http id
    if ds_map_find_value(async_load,"status") == 0 { //Check if status is 0 (success)
        var v_http_result = ds_map_find_value(async_load,"result"); //Set temporary variable of http result
        if string_length(v_http_result) &lt;= 5 &amp;&amp; string_length(v_http_result) &gt;= 0 { //Check if result length is smaller than 5 chars and bigger than 0
            global.dp_role = ds_map_add_replace(global.v_ds_map_user,"dp_role",v_http_result,true); //Replace user role to the new value
            v_txt_details = "Retrieving user credits..."; //Set text details
            popup_loading(v_txt_details); //Update loading text
            v_process += 1; //Increase process by 1
        }
        v_http_id_ucredits = passport_signin(v_dp_uname,v_dp_pass,"dp_ucredits"); //Read user credits
    }
}
if ds_map_find_value(async_load,"id") == v_http_id_ucredits { //Check http id
    if ds_map_find_value(async_load,"status") == 0 { //Check if status is 0 (success)
        var v_http_result = ds_map_find_value(async_load,"result"); //Set temporary variable of http result
        if string_length(v_http_result) &lt;= 9 &amp;&amp; string_length(v_http_result) &gt;= 0 { //Check if result length is smaller than 9 chars and bigger than 0
            global.dp_ucredits = real(ds_map_add_replace(global.v_ds_map_user,"dp_ucredits",v_http_result,true)); //Replace user credits to the new value
            v_txt_details = "Retrieving user special credits..."; //Set text details
            popup_loading(v_txt_details); //Update loading text
            v_process += 1; //Increase process by 1
        }
        v_http_id_uscredits = passport_signin(v_dp_uname,v_dp_pass,"dp_uscredits"); //Read user special credits
    }
}
if ds_map_find_value(async_load,"id") == v_http_id_uscredits { //Check http id
    if ds_map_find_value(async_load,"status") == 0 { //Check if status is 0 (success)
        var v_http_result = ds_map_find_value(async_load,"result"); //Set temporary variable of http result
        if string_length(v_http_result) &lt;= 4 &amp;&amp; string_length(v_http_result) &gt;= 0 { //Check if result length is smaller than 4 chars and bigger than 0
            global.dp_uscredits = real(ds_map_add_replace(global.v_ds_map_user,"dp_uscredits",v_http_result,true)); //Replace user special credits to the new value
            v_txt_details = "Retrieving user last login date..."; //Set text details
            popup_loading(v_txt_details); //Update loading text
            v_process += 1; //Increase process by 1
        }
        v_http_id_ldate = passport_signin(v_dp_uname,v_dp_pass,"dp_ldate"); //Read user last date login
    }
}
if ds_map_find_value(async_load,"id") == v_http_id_ldate { //Check http id
    if ds_map_find_value(async_load,"status") == 0 { //Check if status is 0 (success)
        var v_http_result = ds_map_find_value(async_load,"result"); //Set temporary variable of http result
        if string_length(v_http_result) = 19 { //Check if result length is 19 chars
            global.dp_ldate = ds_map_add_replace(global.v_ds_map_user,"dp_ldate",v_http_result,true); //Replace user last login date to the new value
            v_process += 1; //Increase process by 1
        }
        if v_process = 7 { //If process is 7 (completed)
            v_txt_details = "Data received..."; //Set text details
            popup_loading(v_txt_details); //Update loading text
            popup_notification("Welcome, "+global.dp_uname+"!",false,8); //Show welcome notification popup
            v_enabled = false; //Set message is disabled
            v_alarm = 100; //Set alarm timer to 100
        }
        else {
            popup_notification("Failed to reach server.",true,8); //Show error notification popup
            v_enabled = false; //Set message is disabled
            v_alarm = 50; //Set alarm timer to 50
            //v_txt_details = "Failed..."; //Set text details
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
