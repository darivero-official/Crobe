<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defining variable(s)
//Image variable(s)
image_alpha = 0; //Image alpha
image_angle = 0; //Image rotation
image_xscale = global.scaling; //Image x scale
image_yscale = global.scaling; //Image y scale
image_blend = c_white; //Image blend
image_index = 0; //Image index
image_speed = 0; //Image animation speed
//Specific variable(s)
sprite_index = sprSplash_logo; //Sprite index (for change image)
//Additional variable(s)
v_image_turn = 1; //Set image turn (1 = darivero logo, 2 = additional logo, 3 = product logo)
v_image_chance = 1; //Set image chance (used in step event)
v_image_angle_speed = 0; //Set custom image angle speed
v_image_angle_speed_enable = true; //Set custom image angle speed enable
v_col_bg_value = 0; //Set background color value (used in draw event for background transition)
//Pixelate shader properties
v_shd_pixelate_time = 0; //Set time for pixelate shader
v_shd_pixelate_amount = 100; //Set amount for pixelate shader
surf_shd_pixelate_enable = false; //Enable or disable surface for pixelate shader
surf_shd_pixelate = surface_create(global.v_shd_res_x,global.v_shd_res_y); //Create a surface for pixelate shader
surf_shd_pixelate_xscale = 1; //Set xscale properties for pixelate shader surface
surf_shd_pixelate_yscale = 1; //Set yscale properties for pixelate shader surface
surf_shd_pixelate_angle = 0; //Set angle properties for pixelate shader surface
surf_shd_pixelate_blend = c_white; //Set blend properties for pixelate shader surface
surf_shd_pixelate_alpha = 0.5; //Set alpha properties for pixelate shader surface
view_surface_id[0] = surf_shd_pixelate; //Set view surface id to pixelate shader surface
v_spl_fnt_trademark = global.v_spl_fnt_trademark; //Set font
v_spl_txt_fnt_cr = "Fonts that are contained in this game are copyright Bell taken from www.dafont.com/babyblue.font and for the owner is on www.dafont.com/bell.d4023."; //Font copyright
v_spl_txt_imm = "Crobe using Immersion Haptics Technology. What's Haptics? Haptics is the study of touch. Haptic effects (also known as touch or tactile feedback) are produced by actuators, such as motors, the which are built into devices to create vibrations.#Not all Android devices support this feature. Also, in each device will result differently. Kindly to disable this feature if your device is not suitable for this in the settings menu."; //Immersion
v_spl_txt = "Copyright Â© 2014 Darivero Technologies Incorporated. Crobe is a trademark of Darivero. Logos, brand names, and all related are protected by copyright."+"#"+v_spl_txt_imm+"#"+v_spl_txt_fnt_cr; //Text
v_spl_max_l = global.dvc_width*(7/8); //Set message max length (in pixels)
v_spl_fnt_size = font_get_size(v_spl_fnt_trademark)+(font_get_size(v_spl_fnt_trademark)/2); //Get font size from v_spl_fnt_trademark
v_spl_width = 0; //Set text width
v_spl_height = 0; //Set text height
v_msg_fnt_size = font_get_size(global.v_msg_fnt)+(font_get_size(global.v_msg_fnt)/2); //Get font size from message font
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Important functions
//Crobe splash
if os_is_network_connected() = true { //Check if device is connected to internet
    img_splash = 0; //Set splash image
    img_splash_url = 0; //Set splash img url
    v_http_id_spl = crobe_get_splash("1","tc_imgurl"); //Import splash screen
    v_http_id_spl_txt = noone; //Set splash screen text
    background_alpha[0] = 0; //Set background alpha
}
else {
    global.img_splash = 0; //Set splash image
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Freeing functions
surface_free(surf_shd_pixelate); //Freeing surface
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change background colour
background_color = make_colour_rgb(v_col_bg_value,v_col_bg_value,v_col_bg_value);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Updating variables &amp; controlling shader properties
v_shd_pixelate_time += 0.04;
v_spl_width = (string_width_ext(v_spl_txt,v_spl_fnt_size,v_spl_max_l)/2); //Update text width
v_spl_height = (string_height_ext(v_spl_txt,v_spl_fnt_size,v_spl_max_l)/2); //Update text height
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controlling object
//Image turn 1 (darivero logo)
if v_image_turn = 1 { //Check if image turn is 1 (darivero logo)
    sprite_index = sprSplash_logo; //Change sprite to darivero splash logo
    if v_image_chance = 1 { //Check if image has chance to show up
        if image_alpha &lt; 1.5 { //Check if image alpha is smaller than 1.5
            image_alpha += 0.01; //Increase image alpha by 0.01
        }
        else if image_alpha = 1.5 { //Check if image alpha is same as 1.5
            v_image_chance = 0; //Set image chance to 0
        }
    }
    else {
        if image_alpha &gt; 0 { //Check if image alpha is bigger than 0
            image_alpha -= 0.01; //Decrease image alpha by 0.01
        }
        else if image_alpha = 0 { //Check if image alpha is same as 0
            v_image_turn = 2; //Set image turn to 2 (additional logo)
            v_image_chance = 1; //Set image chance to 1 (give chance to turn 2 show up)
        }
    }
}
//Image turn 2 (additional logo)
else if v_image_turn = 2 { //Check if image turn is 2 (additional logo)
    sprite_index = sprSplash_immersion_logo; //Change sprite to additional splash logo
    if v_image_chance = 1 { //Check if image has chance to show up
        if image_alpha &lt; 1.5 { //Check if image alpha is smaller than 1.5
            image_alpha += 0.01; //Increase image alpha by 0.01
        }
        else if image_alpha = 1.5 { //Check if image alpha is same as 1.5
            v_image_chance = 0; //Set image chance to 0
        }
        //Additional effect
        if v_col_bg_value &lt; 255 { //Check if background color value is smaller than 255
            v_col_bg_value += 2.55; //Increase background color value by 5
        }
        if action_if_dice(10) { //Check if 1/10 chance
            surf_shd_pixelate_enable = true; //Enable surface for pixelate shader
            if global.imm_haptics = true { //Check if immersion haptics is enabled
                immersion_play_effect(1); //Immersion play SHARP CLICK 66
            }
        }
        else {
            surf_shd_pixelate_enable = false; //Disable surface for pixelate shader
        }
    }
    else {
        surf_shd_pixelate_enable = false; //Disable surface for pixelate shader
        if image_alpha &gt; 0 { //Check if image alpha is bigger than 0
            image_alpha -= 0.01; //Decrease image alpha by 0.01
        }
        else if image_alpha = 0 { //Check if image alpha is same as 0
            v_image_turn = 3; //Set image turn to 3 (product logo)
            v_image_chance = 1; //Set image chance to 1 (give chance to turn 3 show up)
        }
        if v_col_bg_value &gt; 0 { //Check if background color value is bigger than 0
            v_col_bg_value -= 2.55; //Decrease background color value by 5
        }
    }
}
//Image turn 3 (product logo)
else if v_image_turn = 3 { //Check if image turn is 2 (product logo)
    sprite_index = sprSplash_loading; //Change sprite to product splash logo
    if v_image_chance = 1 { //Check if image has chance to show up
        if v_image_angle_speed_enable = true { //Check if image angle speed is enabled
            if v_image_angle_speed &lt; 15 { //Check if image angle speed is smaller than 15
                v_image_angle_speed += 0.5; //Increase image angle speed by 0.5
            }
            else if v_image_angle_speed = 15 { //Check if image angle speed is same as 15
                v_image_angle_speed_enable = false; //Disable image angle speed
            }
        }
        else {
            if v_image_angle_speed &gt; 2.5 { //Check if image angle speed is bigger than 2.5
                v_image_angle_speed -= 0.5; //Decrease image angle speed by 2
            }
            else if v_image_angle_speed = 2.5 { //Check if image angle speed is same as 2.5
                v_image_angle_speed_enable = true; //Enable image angle speed
            }
        }
        if image_alpha &lt; 1.5 { //Check if image alpha is smaller than 1
            image_alpha += 0.1; //Increase image alpha by 0.1
        }
        if image_alpha = 1.4 { //Check if image alpha is same as 1.4
            if global.user_first_time = true { //Check if this is first time for user
                popup_message("It looks like you just opened Crobe for the first time on this device. We will help you to configure your account. Internet connection will be needed after this.",2,"msg_first_time","exit","Continue","Cancel",false); //Display confirmation message
            }
            else {
                if os_is_network_connected() { //Check if internet connection available
                    if (global.dp_uname = "undefined" &amp;&amp; global.dp_pass = "undefined") { //Check if global username is Username and global password is Password
                        popup_auth_display(0); //Show login popup
                    }
                    else {
                        passport_parse_user_data(); //Parse user data from Passport
                    }
                }
                else {
                    popup_message("You are in offline mode. You will not able to access Marketplace, Prize, Free roam, etc.",2,"start","exit","Continue","Exit",0); //Display information message
                }
            }
        }
        if instance_exists(objSync) { //Check if objSync is exists
            if objSync.v_txt_details = "Data received..." { //Check objSync text details
                v_image_chance = 0; //Set image chance to 1 (give chance to turn 3 show up)
            }
        }
    }
    else {
        v_image_angle_speed_enable = false  //Disable image angle speed
        if v_image_angle_speed_enable = false { //Check if image angle speed is disabled
            if v_image_angle_speed &gt; 2.5 { //Check if image angle speed is bigger than 2.5
                v_image_angle_speed -= 0.5; //Decrease image angle speed by 0.5
            }
        }
        if image_alpha &gt; 0 { //Check if image alpha is bigger than 0
            image_alpha -= 0.1; //Decrease image alpha by 0.1
        }
    }
    image_angle += v_image_angle_speed; //Increase image angle to image angle speed
}
//Image turn 4
if v_image_turn = 4 { //Check if image turn is 4
    image_angle = 0; //Set image angle back to 0
    background_index[0] = img_splash; //Set background 0
    background_visible[0] = true; //Set background 0 visibility
    background_xscale[0] = global.dvc_width/background_width[0];
    background_yscale[0] = global.dvc_height/background_height[0];
    if v_image_chance = 1 { //Check if image has chance to show up
        //if image_alpha &lt; 1.5 { //Check if image alpha is smaller than 1.5
        //    image_alpha += 0.01; //Increase image alpha by 0.01
        //}
        if background_alpha[0] &lt; 1.5 { //Check if background alpha is smaller than 1.5
            background_alpha[0] += 0.01; //Increase background alpha by 0.01
        }
        if device_mouse_check_button_released(0,mb_left) { //Check if mouse device 0 is left released
            v_image_chance = 0; //Set image chance to 0
        }
    }
    else {
        //if image_alpha &gt; 0 { //Check if image alpha is bigger than 0
        //    image_alpha -= 0.01; //Decrease image alpha by 0.01
        //}
        if background_alpha[0] &gt; 0 { //Check if background alpha is bigger than 0
            background_alpha[0] -= 0.01; //Decrease background alpha by 0.01
        }
        else if background_alpha[0] = 0 { //Check if background alpha is same as 0
            instance_destroy(); //Destroy object
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connecting to server
var v_http_result = ds_map_find_value(async_load,"result"); //Set temporary variable of http result
if ds_map_find_value(async_load,"id") == v_http_id_spl { //Check http id
    if string_length(v_http_result) &gt; 5 { //Check if result length is bigger than 5
        if string_count("http://",v_http_result) &gt;= 1 { //Check if found http:// text from result
            img_splash_url = v_http_result; //Set splash img url to http result
            img_splash = background_add(v_http_result,1,0); //Set splash background
        }
    }
}
if ds_map_find_value(async_load,"id") == v_http_id_spl_txt { //Check http id
    if ds_map_find_value(async_load,"status") == 0 { //Check if status is 0 (success)
        if string_count("No",v_http_result) &gt;= 1 { //Check if found No text from result
            popup_notification(v_http_result,true,6); //Show error notification popup
        }
        else {
            popup_notification(v_http_result,false,6); //Show information notification popup
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If splash image is loaded
var v_http_result = ds_map_find_value(async_load,"filename"); //Set temporary variable of http result
if ds_map_find_value(async_load,"id") == img_splash { //Check http id
    if string_count("http://",v_http_result) &gt;= 1 { //Check if found http:// text from result
        popup_notification("Splash screen loaded!",false,4); //Show info notification popup
        v_http_id_spl_txt = crobe_get_splash("1","tc_title"); //Import splash title
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shader creation
if surf_shd_pixelate_enable = true { //Check if pixelate shader is enabled
    shader_set(shdPixelate); //Load pixelate shader
    shader_set_uniform_f(shader_get_uniform(shdPixelate,"time"),v_shd_pixelate_time); //Set time uniform to time var
    shader_set_uniform_f(shader_get_uniform(shdPixelate, "pixel_amount"),v_shd_pixelate_amount); //Set amount uniform to amount var
    shader_set_uniform_f(shader_get_uniform(shdPixelate,"resolution"),global.v_shd_res_x,global.v_shd_res_y); //Set reso uniform to reso var
    draw_surface_ext(surf_shd_pixelate,view_xview[0],view_yview[0],surf_shd_pixelate_xscale,surf_shd_pixelate_yscale,surf_shd_pixelate_angle,surf_shd_pixelate_blend,surf_shd_pixelate_alpha); //Draw and place shader
    shader_reset();
}
draw_reset(); //Reset all draw
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing object
draw_set_halign(fa_center); //Center horizontal alignment for all text
draw_set_valign(fa_bottom); //Top vertical alignment for all text
//Logo creation
draw_set_alpha(image_alpha); //Set image alpha
if !v_image_turn = 4 { //Check if image turn is not 4
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha); //Draw logo(s)
}
else {
    if os_is_network_connected() { //Check if device is cinnected to internet
        draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha); //Draw logo(s)
    }
}
if v_image_turn = 3 { //Check if image turn is 3 (product logo)
    draw_set_font(v_spl_fnt_trademark); //Set font to v_spl_fnt_trademark
    draw_text_ext(x,display_get_gui_height()-20*global.scaling,v_spl_txt,v_spl_fnt_size,v_spl_max_l); //Draw copyright text
}
if v_image_turn = 4 { //Check if image turn is 4
    draw_set_alpha(background_alpha[0]); //Set image alpha
    draw_set_font(global.v_msg_fnt); //Set font to v_spl_fnt_trademark
    draw_set_colour(c_gray); //Set drawing colour
    draw_text(x-(1*global.scaling),display_get_gui_height()-100*global.scaling-(1*global.scaling),"Tap anywhere to continue"); //Draw tap anywhere text
    draw_set_colour(c_white); //Set drawing colour
    draw_text(x,display_get_gui_height()-100*global.scaling,"Tap anywhere to continue"); //Draw tap anywhere text
}
draw_reset(); //Reset all draw
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
